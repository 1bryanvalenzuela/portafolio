---
import { Image } from "astro:assets";
import img from "../assets/image.webp";

import gb from "../assets/gb.svg";
import es from "../assets/es.svg";

const { language } = Astro.props;

const flag = language == "es" ? gb : es;

const cookies = Astro.cookies;
const themeCookies = cookies.get("theme");
let Theme = "";
let themeValue = "";
let themeString = "oscuro";
let themeIcon = "üåô";
if (themeCookies) {
  Theme = themeCookies.value;
  if (Theme === "dark") {
    themeValue = "dark";
    themeString = "claro";
    themeIcon = "‚òÄÔ∏è";
  }
}
---

<div
  id="inicio"
  class="relative flex w-full items-center justify-center bg-secondary overflow-hidden text-primary"
>
  <div class=""></div>
  <div class="relative w-full justify-center items-center pt-15">
    <div
      class="w-55 h-55 md:w-65 md:h-65 mx-auto bg-primary rounded-full p-2 md:p-2.5 md:mt-30 contenedor-style mb-5 hidden"
    >
      <Image
        src={img}
        loading="eager"
        alt="Avatar de perfil"
        class="w-full h-full rounded-full object-cover border border-transparent"
      />
    </div>
    <div class="flex w-full justify-end pe-8 pt-5 gap-5">
      <button
        id="theme-button"
        class="inline-flex font-semibold text-sm ubuntu-regular border-b-1 border-transparent linkheader cursor-pointer"
        value={themeValue}
      >
        Modo {themeString}<span class="ps-2">{themeIcon}</span>
      </button>
      <a
        href={language == "es" ? "/en" : "/"}
        class="inline-flex font-semibold text-sm ubuntu-regular border-b-1 border-transparent linkheader"
      >
        {language == "es" ? "English version" : "Versi√≥n en espa√±ol"}<Image
          class="w-auto h-4 ps-2 saturate-70"
          loading="eager"
          src={flag}
          alt={language == "es" ? "USA Flag" : "Spanish Flag"}
        /></a
      >
    </div>
  </div>
</div>

<style>
  @keyframes changeBgGradient {
    0% {
      transform: translate(25%, 35%);
    }
    50% {
      transform: translate(-25%, -35%);
    }
    100% {
      transform: translate(25%, 35%);
    }
  }

  .logo-background {
    position: absolute;
    z-index: 0;
    will-change: transform;
    transform: translate(25%, 35%);
    background: linear-gradient(
        164deg,
        #358d23 0%,
        #56dd4a 42%,
        #89ff71 49%,
        #89ff71 51%,
        #56dd4a 58%,
        #358d23 100%
      )
      repeat;
    width: 300%;
    height: 400%;
    animation: changeBgGradient 12s cubic-bezier(0.2, 0, 0.8, 1) 1s infinite;
  }
</style>

<script>
  const jumbo = document.querySelector(".jumbo") as HTMLElement;

  if (jumbo) {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (!entry.isIntersecting) {
            jumbo.style.animationPlayState = "paused";
          } else {
            jumbo.style.animationPlayState = "running";
          }
        });
      },
      { threshold: 0.1 }
    );

    observer.observe(jumbo);
  }
</script>

<script>
  const themeButton = document.querySelector(
    "#theme-button"
  ) as HTMLButtonElement;
  if (themeButton) {
    themeButton.addEventListener("click", (e: any) => {
      const currentTheme = e.target.value;
      if (currentTheme === "dark") {
        document.cookie = "theme=light; path=/";
      } else {
        document.cookie = "theme=dark; path=/";
      }
      window.location.reload();
    });
  }
</script>
